const fs = require("fs");

module.exports = class {
  static config = {
    name: "fish",
    aliases: ["fishing", "cauca"],
    version: "1.0.0",
    role: 0,
    author: "Panna",
    info: "Game c√¢u c√°",
    Category: "Game",
    guides: ".fish + l·ªánh (cauca/shop/info/khu/...)",
    cd: 5,
    hasPrefix: true,
    images: []
  };

  static async onRun({ api, event, msg, model, Threads, Users, Currencies, args }) {
    const { threadID, senderID, messageID } = event;
    const input = args[0]?.toLowerCase();

    const userFile = `system/data/fishing/${senderID}.json`;
    if (!fs.existsSync(userFile)) {
      const name = (await Users.getName(senderID)) || `Ng∆∞·ªùi ch∆°i ${senderID}`;
      fs.writeFileSync(userFile, JSON.stringify({
        name, xu: 1000, rod: { name: "C·∫ßn G·ªó", tier: 0 },
        line: { name: "D√¢y th∆∞·ªùng", durability: 20, maxDurability: 20 },
        bait: "M·ªìi th∆∞·ªùng", level: 1, fish: {}, dex: [], buffs: [],
        title: "", khu: "S√¥ng L·∫∑ng"
      }, null, 2));
    }

    if (!input) {
      return api.sendMessage(
        `üé£ MENU C√ÇU C√Å\n\n` +
        `‚Ä¢ .fish cauca - C√¢u c√°\n` +
        `‚Ä¢ .fish khu - Khu v·ª±c c√¢u\n` +
        `‚Ä¢ .fish shop - Mua c·∫ßn/m·ªìi/d√¢y\n` +
        `‚Ä¢ .fish craft - Ch·∫ø t·∫°o c·∫ßn ƒë·∫∑c bi·ªát\n` +
        `‚Ä¢ .fish upgrade - N√¢ng c·∫•p c·∫ßn\n` +
        `‚Ä¢ .fish dex - B·ªô s∆∞u t·∫≠p c√°\n` +
        `‚Ä¢ .fish info - Th√¥ng tin ng∆∞·ªùi ch∆°i\n` +
        `‚Ä¢ .fish inv - T√∫i ƒë·ªì c√°\n` +
        `‚Ä¢ .fish sell - B√°n c√°\n` +
        `‚Ä¢ .fish duel/hire/boss/quest/market/top`,
        threadID, messageID
      );
    }

    switch (input) {
      case "cauca": return this.handle_cauca({ api, event, model, Threads, Users, Currencies });
      case "info": return this.handle_info({ api, event, model, Threads, Users, Currencies });
      case "inv": return this.handle_inv({ api, event, model, Threads, Users, Currencies });
      case "shop": return this.handle_shop({ api, event, model, Threads, Users, Currencies });
      case "craft": return this.handle_craft({ api, event, model, Threads, Users, Currencies });
      case "upgrade": return this.handle_upgrade({ api, event, model, Threads, Users, Currencies });
      case "bait": return this.handle_bait({ api, event, model, Threads, Users, Currencies });
      case "dex": return this.handle_dex({ api, event, model, Threads, Users, Currencies });
      case "sell": return this.handle_sell({ api, event, model, Threads, Users, Currencies });
      case "khu": return this.handle_khu({ api, event, model, Threads, Users, Currencies });
      case "duel": return this.handle_duel({ api, event, model, Threads, Users, Currencies });
      case "boss": return this.handle_boss({ api, event, model, Threads, Users, Currencies });
      case "hire": return this.handle_hire({ api, event, model, Threads, Users, Currencies });
      case "market": return this.handle_market({ api, event, model, Threads, Users, Currencies });
      case "quest": return this.handle_quest({ api, event, model, Threads, Users, Currencies });
      case "top": return this.handle_top({ api, event, model, Threads, Users, Currencies });
      case "line": return this.handle_line({ api, event, model, Threads, Users, Currencies });
      default:
        return api.sendMessage(
          `‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá. G√µ ".fish" ƒë·ªÉ xem menu.`, threadID, messageID
        );
    }
  }

  static async handle_cauca({ api, event, msg, model, Threads, Users, Currencies }) {
    const { senderID, threadID, messageID } = event;
    const userFile = `system/data/fishing/${senderID}.json`;
    const data = JSON.parse(fs.readFileSync(userFile));

    if (data.line.durability <= 0)
      return api.sendMessage(`üßµ D√¢y c√¢u ƒë√£ ƒë·ª©t, h√£y mua d√¢y m·ªõi (.fish line)!`, threadID, messageID);

    const fishList = [
      { name: "C√° di·∫øc", rarity: "common", value: 300 },
      { name: "C√° l√≥c", rarity: "common", value: 400 },
      { name: "C√° heo", rarity: "rare", value: 1500 },
      { name: "C√° m·∫≠p", rarity: "legendary", value: 6000 },
      { name: "C√° r·ªìng", rarity: "legendary", value: 10000 },
      { name: "C√° ma", rarity: "legendary", value: 12000 },
      { name: "C√° m·ªìi", rarity: "common", value: 250 },
      { name: "C√° m·∫∑t trƒÉng", rarity: "rare", value: 2500 },
      { name: "C√° th·∫ßn tho·∫°i", rarity: "legendary", value: 20000 }
    ];

    const chance = Math.random() * 100;
    let fish;
    if (chance < 65) fish = fishList.find(f => f.rarity === "common");
    else if (chance < 90) fish = fishList.find(f => f.rarity === "rare");
    else fish = fishList.find(f => f.rarity === "legendary");

    const congrats = [
      `üéâ Wow! B·∫°n c√¢u ƒë∆∞·ª£c ${fish.name}!`,
      `üêü ${fish.name} ƒë√£ m·∫Øc c√¢u r·ªìi k√¨a!`,
      `üé£ B·∫°n k√©o ƒë∆∞·ª£c ${fish.name} t·ª´ h·ªì!`,
      `‚ú® M·ªôt con ${fish.name} tuy·ªát ƒë·∫πp!`,
      `üéØ ${fish.name} kh√¥ng tho√°t ƒë∆∞·ª£c b·∫°n!`
    ];

    const emoji = {
      common: "‚ö™",
      rare: "üîµ",
      legendary: "üü°"
    };

    data.xu += fish.value;
    data.line.durability--;
    data.fish[fish.name] = (data.fish[fish.name] || 0) + 1;
    if (!data.dex.includes(fish.name)) data.dex.push(fish.name);

    fs.writeFileSync(userFile, JSON.stringify(data, null, 2));

    const fishMsg =
      `${congrats[Math.floor(Math.random() * congrats.length)]}\n` +
      `(${fish.rarity.toUpperCase()} ‚Äì ${emoji[fish.rarity]})\n` +
      `üí∞ +${fish.value.toLocaleString()} xu`;

    return api.sendMessage(fishMsg, threadID, messageID);
  }
  static async handle_shop({ api, event, model, Threads, Users, Currencies }) {
    const shopMsg =
      `üõí SHOP C√ÇU C√Å\n\n` +
      `üé£ C·∫¶N:\n` +
      `‚Ä¢ C·∫ßn G·ªó (+0) - 0 xu (c√≥ s·∫µn)\n` +
      `‚Ä¢ C·∫ßn B·∫°c (+0) - 5000 xu\n` +
      `‚Ä¢ C·∫ßn V√†ng (+0) - 15000 xu\n\n` +
      `üßµ D√ÇY:\n` +
      `‚Ä¢ D√¢y th∆∞·ªùng - 200 xu\n` +
      `‚Ä¢ D√¢y b·ªÅn - 500 xu\n\n` +
      `üíé ƒê√Å N√ÇNG C·∫§P:\n` +
      `‚Ä¢ ƒê√° n√¢ng c·∫•p - 1000 xu\n\n` +
      `ü™± M·ªíI:\n` +
      `‚Ä¢ M·ªìi th∆∞·ªùng - 0 xu\n` +
      `‚Ä¢ M·ªìi th∆°m - 800 xu\n` +
      `‚Ä¢ M·ªìi hi·∫øm - 2000 xu`;
    return api.sendMessage(shopMsg, event.threadID, event.messageID);
  }

  static async handle_craft({ api, event, model, Threads, Users, Currencies }) {
    return api.sendMessage(
      `‚öíÔ∏è CH·∫æ T·∫†O\n\n‚Ä¢ C·∫ßn R·ªìng (+1): y√™u c·∫ßu C·∫ßn B·∫°c + ƒê√° x3\n‚Ä¢ C·∫ßn B√≥ng T·ªëi (+2): C·∫ßn V√†ng + ƒê√° x5\n‚Ä¢ Kh√¥ng th·ªÉ mua c√°c c·∫ßn n√†y t·ª´ shop!`,
      event.threadID,
      event.messageID
    );
  }

  static async handle_upgrade({ api, event, model, Threads, Users, Currencies }) {
    return api.sendMessage(
      `üìà N√ÇNG C·∫§P C·∫¶N C√ÇU\n\n‚Ä¢ D√πng ƒê√° n√¢ng c·∫•p ƒë·ªÉ tƒÉng +1, t·ªëi ƒëa +5\n‚Ä¢ C√†ng n√¢ng cao, t·ªâ l·ªá b·∫Øt c√° hi·∫øm cao h∆°n v√† gi·∫£m r√°ch d√¢y`,
      event.threadID,
      event.messageID
    );
  }

  static async handle_info({ api, event, model, Threads, Users, Currencies }) {
    const data = JSON.parse(fs.readFileSync(`system/data/fishing/${event.senderID}.json`));
    const name = (await Users.getName(event.senderID)) || data.name;

    const infoMsg =
      `üìÑ TH√îNG TIN NG∆Ø D√ÇN\n\n` +
      `üë§ T√™n: ${name}\n` +
      `üé£ C·∫ßn: ${data.rod.name} (+${data.rod.tier || 0})\n` +
      `ü™± M·ªìi: ${data.bait}\n` +
      `üßµ D√¢y: ${data.line.name} (${data.line.durability}/${data.line.maxDurability})\n` +
      `üí∞ Xu: ${data.xu.toLocaleString()} xu\n` +
      `üîñ Danh hi·ªáu: ${data.title || "Ch∆∞a c√≥"}\n` +
      `üìç Khu: ${data.khu}\n` +
      `‚≠ê Level: ${data.level}`;
    return api.sendMessage(infoMsg, event.threadID, event.messageID);
  }

  static async handle_inv({ api, event, model, Threads, Users, Currencies }) {
    const data = JSON.parse(fs.readFileSync(`system/data/fishing/${event.senderID}.json`));
    const fishBag = data.fish;
    const list = Object.keys(fishBag).length
      ? Object.entries(fishBag).map(([f, n]) => `‚Ä¢ ${f} √ó ${n}`).join("\n")
      : "‚ùå B·∫°n ch∆∞a c√≥ con c√° n√†o.";

    return api.sendMessage(`üéí T√öI C√Å\n\n${list}`, event.threadID, event.messageID);
  }

  static async handle_bait({ api, event, model, Threads, Users, Currencies }) {
    const baitMsg =
      `ü™± M·ªíI C√ÇU\n\n` +
      `‚Ä¢ M·ªìi th∆∞·ªùng: c∆° b·∫£n\n` +
      `‚Ä¢ M·ªìi th∆°m: tƒÉng 10% t·ªâ l·ªá ra c√° rare\n` +
      `‚Ä¢ M·ªìi hi·∫øm: tƒÉng 25% t·ªâ l·ªá ra c√° rare & legendary\n` +
      `‚Ä¢ M·ªôt s·ªë m·ªìi ƒë·∫∑c bi·ªát c√≥ th·ªÉ ch·ªâ c√≥ t·ª´ s·ª± ki·ªán`;
    return api.sendMessage(baitMsg, event.threadID, event.messageID);
  }

  static async handle_line({ api, event, model, Threads, Users, Currencies }) {
    return api.sendMessage(
      `üßµ D√ÇY C√ÇU\n\n‚Ä¢ D√¢y th∆∞·ªùng: 20 l·∫ßn d√πng\n‚Ä¢ D√¢y b·ªÅn: 40 l·∫ßn d√πng\n‚Ä¢ N·∫øu d√¢y ƒë·ª©t, b·∫°n s·∫Ω kh√¥ng th·ªÉ c√¢u.`,
      event.threadID,
      event.messageID
    );
  }

  static async handle_sell({ api, event, model, Threads, Users, Currencies }) {
    const userFile = `system/data/fishing/${event.senderID}.json`;
    const data = JSON.parse(fs.readFileSync(userFile));
    const values = { "common": 300, "rare": 1500, "legendary": 5000 };
    let total = 0;

    for (const [fish, amount] of Object.entries(data.fish)) {
      if (amount > 0) {
        const rarity = ["r·ªìng", "ma", "m·∫≠p"].some(k => fish.toLowerCase().includes(k))
          ? "legendary" : ["heo", "trƒÉng"].some(k => fish.toLowerCase().includes(k))
          ? "rare" : "common";
        total += values[rarity] * amount;
      }
    }

    data.xu += total;
    data.fish = {};
    fs.writeFileSync(userFile, JSON.stringify(data, null, 2));
    return api.sendMessage(`üí∞ B·∫°n ƒë√£ b√°n h·∫øt c√° v√† nh·∫≠n ƒë∆∞·ª£c ${total.toLocaleString()} xu`, event.threadID, event.messageID);
  }
  static async handle_dex({ api, event, model, Threads, Users, Currencies }) {
    const data = JSON.parse(fs.readFileSync(`system/data/fishing/${event.senderID}.json`));
    const dex = data.dex;
    if (!dex.length) return api.sendMessage("üìò B·∫°n ch∆∞a c√¢u ƒë∆∞·ª£c con c√° n√†o!", event.threadID, event.messageID);

    const dexMsg = `üìò B·ªò S∆ØU T·∫¨P C√Å (${dex.length} lo√†i)\n\n` +
      dex.map((name, i) => `#${i + 1}. ${name}`).join("\n");
    return api.sendMessage(dexMsg, event.threadID, event.messageID);
  }

  static async handle_khu({ api, event, model, Threads, Users, Currencies }) {
    const userFile = `system/data/fishing/${event.senderID}.json`;
    const data = JSON.parse(fs.readFileSync(userFile));
    const level = data.level;

    const areas = [
      { name: "S√¥ng L·∫∑ng", required: 1 },
      { name: "H·ªì L·ªõn", required: 3 },
      { name: "R·ª´ng Thi√™ng", required: 5 },
      { name: "N√∫i L·ª≠a", required: 8 },
      { name: "Hang BƒÉng", required: 12 }
    ];

    const list = areas.map(area => {
      const status = level >= area.required ? "(‚úîÔ∏è M·ªü)" : `(üîí C·∫ßn LV ${area.required})`;
      const boss = (area.name === "N√∫i L·ª≠a") ? "üî• Boss c√°!" : "";
      return `‚Ä¢ ${area.name} ${status} ${boss}`;
    }).join("\n");

    return api.sendMessage(`üìç KHU V·ª∞C\n${list}\n\nD√πng .fish khu [t√™n] ƒë·ªÉ ch·ªçn`, event.threadID, event.messageID);
  }

  static async handle_top({ api, event, model, Threads, Users, Currencies }) {
    const dir = "system/data/fishing";
    const files = fs.readdirSync(dir).filter(f => f.endsWith(".json"));

    const top = files.map(f => {
      const data = JSON.parse(fs.readFileSync(`${dir}/${f}`));
      return { name: data.name, xu: data.xu };
    }).sort((a, b) => b.xu - a.xu).slice(0, 10);

    const topMsg = `üèÜ B·∫¢NG X·∫æP H·∫†NG NG∆Ø D√ÇN\n\n` +
      top.map((u, i) => `#${i + 1}. ${u.name} - ${u.xu.toLocaleString()} xu`).join("\n");
    return api.sendMessage(topMsg, event.threadID, event.messageID);
  }

  static async handle_duel({ api, event, model, Threads, Users, Currencies }) {
    return api.sendMessage(
      `‚öîÔ∏è PvP ƒê·∫§U C√Å s·∫Ω s·ªõm ra m·∫Øt!\nB·∫°n c√≥ th·ªÉ th√°ch ƒë·∫•u ng∆∞·ªùi ch∆°i kh√°c ƒë·ªÉ gi√†nh c√° ho·∫∑c xu.`,
      event.threadID,
      event.messageID
    );
  }

  static async handle_boss({ api, event, model, Threads, Users, Currencies }) {
    return api.sendMessage(
      `üî• BOSS C√Å\n\nBoss Qu·ª∑ ƒê·ªè hi·ªán ƒëang lang thang ·ªü "N√∫i L·ª≠a".\nH√£y ƒë·∫øn ƒë√≥ b·∫±ng l·ªánh ".fish khu" v√† c√¢u ƒë·ªÉ b·∫Øt g·∫∑p!`,
      event.threadID,
      event.messageID
    );
  }

  static async handle_market({ api, event, model, Threads, Users, Currencies }) {
    return api.sendMessage(
      `üè™ CH·ª¢ C√Å\n\nT√≠nh nƒÉng giao d·ªãch c√° & v·∫≠t ph·∫©m gi·ªØa ng∆∞·ªùi ch∆°i ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.`,
      event.threadID,
      event.messageID
    );
  }

  static async handle_quest({ api, event, model, Threads, Users, Currencies }) {
    return api.sendMessage(
      `üìã NHI·ªÜM V·ª§ H·∫∞NG NG√ÄY\n\n‚Ä¢ B·∫Øt 3 c√° hi·∫øm\n‚Ä¢ B√°n 5 con c√°\n‚Ä¢ Ki·∫øm 2000 xu t·ª´ c√¢u c√°\n\n(T√≠nh nƒÉng ho√†n th√†nh t·ª± ƒë·ªông s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t)`,
      event.threadID,
      event.messageID
    );
  }

  static async handle_hire({ api, event, model, Threads, Users, Currencies }) {
    return api.sendMessage(
      `üßë‚Äçüåæ THU√ä NG∆Ø D√ÇN C√ÇU H·ªò\n\nB·∫°n s·∫Ω t·ª± ƒë·ªông c√¢u c√° trong 30 ph√∫t t·ªõi v√† nh·∫≠n c√° ng·∫´u nhi√™n. T√≠nh nƒÉng ƒëang th·ª≠ nghi·ªám.`,
      event.threadID,
      event.messageID
    );
  }
  static async onLoad({ api, model }) {
    const folder = "system/data/fishing";
    if (!fs.existsSync(folder)) fs.mkdirSync(folder, { recursive: true });

    // T·ª± ƒë·ªông spawn Boss c√° m·ªói 30 ph√∫t
    setInterval(() => {
      const areas = ["N√∫i L·ª≠a", "Hang BƒÉng", "R·ª´ng Thi√™ng"];
      const randomArea = areas[Math.floor(Math.random() * areas.length)];
      api.sendMessage(
        `‚ö†Ô∏è M·ªôt con Boss c√° v·ª´a xu·∫•t hi·ªán t·∫°i ${randomArea}!\nNhanh l√™n v√† d√πng ".fish khu" ƒë·ªÉ ƒë·∫øn ƒë√≥!`,
        model.getMainThread()
      );
    }, 1000 * 60 * 30);
  }

  static async onEvent({ api, event, model, Threads, Users, Currencies }) {
    // C√≥ th·ªÉ x·ª≠ l√Ω s·ª± ki·ªán tin nh·∫Øn n·∫øu c·∫ßn (hi·ªán ch∆∞a d√πng)
  }

  static async onReply({ api, event, model, Threads, Users, Currencies, onReply }) {
    // C√≥ th·ªÉ x·ª≠ l√Ω tr·∫£ l·ªùi tin nh·∫Øn n·∫øu c√≥ (hi·ªán ch∆∞a d√πng)
  }

  static async onReaction({ api, event, model, Threads, Users, Currencies, onReaction }) {
    // C√≥ th·ªÉ x·ª≠ l√Ω ph·∫£n ·ª©ng (hi·ªán ch∆∞a d√πng)
  }
};